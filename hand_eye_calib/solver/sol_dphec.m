function varargout = sol_dphec(TA,TB,N)
%% implementation of hand eye calibration proposed by:
%% Heller, Jan, Didier Henrion, and Tomas Pajdla. 
%% "Hand-eye and robot-world calibration by global polynomial optimization." 
%% Robotics and Automation (ICRA), 2014 IEEE International Conference on. IEEE, 2014.

% only the dqhec method is implemented since its performance is comparable 
% to the dual quaternion method while other methods cannot even bypass the
% dula quaternion method.

%% Author: xiahaa@space.dtu.dk
    dim = size(TA,2);
    if N < 2
        error('At least two samples needed for unique solution!');
        varargout{1} = [];
        return;
    end
    if dim < 4
        error('Only work for T!');
        varargout{1} = [];
        return;
    end
    
    format short;
    
    Nv = 0;
    ids = [];
    thetaas = zeros(N,1);das = zeros(N,1);
    thetabs = zeros(N,1);dbs = zeros(N,1);
    las = zeros(N,3);mas = zeros(N,3);
    lbs = zeros(N,3);mbs = zeros(N,3);
    for i = 1:N
        T1 = TA(i,:,:);T1 = reshape(T1,dim,dim,1);
        T2 = TB(i,:,:);T2 = reshape(T2,dim,dim,1);
        
        [thetaa, da, la, ma] = screwParams(T2(1:3,1:3),T2(1:3,4));
        [thetab, db, lb, mb] = screwParams(T1(1:3,1:3),T1(1:3,4));
        
        thetaas(i) = thetaa;das(i) = da;las(i,:) = la';mas(i,:) = ma';
        thetabs(i) = thetab;dbs(i) = db;lbs(i,:) = lb';mbs(i,:) = mb';
        
        if abs(thetaa-thetab) < 1e-3 && abs(da-db) < 1e-3
            Nv = Nv + 1;
            ids = [ids;i];
        end
    end
    
    mset clear
    pars.eps = 1e-20;
    mset(pars);
    
    mpol('q1', 'q2', 'q3', 'q4', 't1', 't2', 't3');
    monvect = dqhec_monvect(q1,q2,q3,q4,t1,t2,t3);
    
    coeffs = zeros(1, size(monvect, 1));
    
    for i = 1:Nv          
        ii = ids(i);
        qas = [cos(thetaas(ii)*0.5);sin(thetaas(ii)*0.5).*las(ii,:)'];
        qdas = [(-das(ii)*0.5)*sin(thetaas(ii)*0.5);sin(thetaas(ii)*0.5).*mas(ii,:)'+(das(ii)*0.5*cos(thetaas(ii)*0.5)).*las(ii,:)'];
        qbs = [cos(thetabs(ii)*0.5);sin(thetabs(ii)*0.5).*lbs(ii,:)'];
        qdbs = [(-dbs(ii)*0.5)*sin(thetabs(ii)*0.5);sin(thetabs(ii)*0.5).*mbs(ii,:)'+(dbs(ii)*0.5*cos(thetabs(ii)*0.5)).*lbs(ii,:)'];

        % coeffs
        cfs = dqhec_poly([qas;qdas], [qbs;qdbs]);
        coeffs = coeffs + cfs;    
    end  
%     exp.verbose = 1;
%     exp.verbose = 1;
%     F = coeffs * monvect;
% 
%     K_norm = [q1^2 + q2^2 + q3^2 + q4^2 == 1]; %#ok<NASGU>
%     K_norm = [q1^2 + q2^2 + q3^2 + q4^2 == 1, ...
%               q1 >= 0]; %#ok<NASGU>
% %     qx1*qx5 + qx2*qx6 + qx3*qx7+ qx4*qx8 == 0, ...
%     tic;
%     if (isfield(exp, 'verbose') && exp.verbose == 1)
%         [problem] = msdp(min(F),K_norm, 2);
%         [stat, obj] = msol(problem); %#ok<NASGU>
%     else
%         [T, problem] = evalc('msdp(min(F), K_norm, 2)'); %#ok<NASGU>
%         [T, stat, obj] = evalc('msol(problem)'); %#ok<NASGU>
%     end
%     exp.timer_mpaqhec = toc;
%     disp(strcat('time comsumption: ', num2str(exp.timer_mpaqhec)));
%     rqx = double([q1 q2 q3 q4 t1 t2 t3]');
%     
%     R12 = q2r([rqx(1:4)]);
%     t12 = [rqx(5:7)];

    %% direct use the code provided by the author
    addpath('C:/Users/xiahaa/Documents/DTU/paper/hand_eye_calibration/code/mpherwc/mpherwc');
%     exp.verbose = 1;
    for i = 1:N
        T1 = TA(i,:,:);T1 = reshape(T1,dim,dim,1);
        T2 = TB(i,:,:);T2 = reshape(T2,dim,dim,1);
        exp.Rb{i} = T1(1:3,1:3);exp.tb{i} = T1(1:3,4);
        exp.Ra{i} = T2(1:3,1:3);exp.ta{i} = T2(1:3,4);
    end
    fprintf(1, 'Running dqhec ...\n');
    exp = dqhec(exp);
    R12 = exp.Rx_dqhec;
    t12 = exp.tx_dqhec;
   
    if dim == 4
        varargout{1} = [R12 t12;[0 0 0 1]];
    else
        varargout{1} = R12;
    end
end

function monvect = dqhec_monvect(q1,q2,q3,q4,t1,t2,t3)
    monvect = [ q1^2*t1^2
        q1^2*t1*t2
        q1^2*t1*t3
        q1^2*t1
        q1^2*t2^2
        q1^2*t2*t3
        q1^2*t2
        q1^2*t3^2
        q1^2*t3
        q1^2
        q1*q2*t1^2
        q1*q2*t1*t2
        q1*q2*t1*t3
        q1*q2*t1
        q1*q2*t2^2
        q1*q2*t2*t3
        q1*q2*t2
        q1*q2*t3^2
        q1*q2*t3
        q1*q2
        q1*q3*t1^2
        q1*q3*t1*t2
        q1*q3*t1*t3
        q1*q3*t1
        q1*q3*t2^2
        q1*q3*t2*t3
        q1*q3*t2
        q1*q3*t3^2
        q1*q3*t3
        q1*q3
        q1*q4*t1^2
        q1*q4*t1*t2
        q1*q4*t1*t3
        q1*q4*t1
        q1*q4*t2^2
        q1*q4*t2*t3
        q1*q4*t2
        q1*q4*t3^2
        q1*q4*t3
        q1*q4
        q2^2*t1^2
        q2^2*t1*t2
        q2^2*t1*t3
        q2^2*t1
        q2^2*t2^2
        q2^2*t2*t3
        q2^2*t2
        q2^2*t3^2
        q2^2*t3
        q2^2
        q2*q3*t1^2
        q2*q3*t1*t2
        q2*q3*t1*t3
        q2*q3*t1
        q2*q3*t2^2
        q2*q3*t2*t3
        q2*q3*t2
        q2*q3*t3^2
        q2*q3*t3
        q2*q3
        q2*q4*t1^2
        q2*q4*t1*t2
        q2*q4*t1*t3
        q2*q4*t1
        q2*q4*t2^2
        q2*q4*t2*t3
        q2*q4*t2
        q2*q4*t3^2
        q2*q4*t3
        q2*q4
        q3^2*t1^2
        q3^2*t1*t2
        q3^2*t1*t3
        q3^2*t1
        q3^2*t2^2
        q3^2*t2*t3
        q3^2*t2
        q3^2*t3^2
        q3^2*t3
        q3^2
        q3*q4*t1^2
        q3*q4*t1*t2
        q3*q4*t1*t3
        q3*q4*t1
        q3*q4*t2^2
        q3*q4*t2*t3
        q3*q4*t2
        q3*q4*t3^2
        q3*q4*t3
        q3*q4
        q4^2*t1^2
        q4^2*t1*t2
        q4^2*t1*t3
        q4^2*t1
        q4^2*t2^2
        q4^2*t2*t3
        q4^2*t2
        q4^2*t3^2
        q4^2*t3
        q4^2];
end

function coeff = dqhec_poly(da, db)
    a1 = da(1);
    a2 = da(2);
    a3 = da(3);
    a4 = da(4);
    a5 = da(5);
    a6 = da(6);
    a7 = da(7);
    a8 = da(8);

    b1 = db(1);
    b2 = db(2);
    b3 = db(3);
    b4 = db(4);
    b5 = db(5);
    b6 = db(6);
    b7 = db(7);
    b8 = db(8);
    
    coeff = [ (a1/2 - b1/2)^2 + (a2/2 - b2/2)^2 + (a3/2 + b3/2)^2 + (a4/2 + b4/2)^2, ...
    2*(a2/2 - b2/2)*(a3/2 - b3/2) - 2*(a2/2 + b2/2)*(a3/2 + b3/2), ...
    2*(a2/2 - b2/2)*(a4/2 - b4/2) - 2*(a2/2 + b2/2)*(a4/2 + b4/2), ...
    2*(a6 - b6)*(a1/2 - b1/2) - 2*(a5 - b5)*(a2/2 - b2/2) + 2*(a7 - b7)*(a4/2 + b4/2) - 2*(a8 - b8)*(a3/2 + b3/2), ...
    (a1/2 - b1/2)^2 + (a2/2 + b2/2)^2 + (a3/2 - b3/2)^2 + (a4/2 + b4/2)^2, ...
    2*(a3/2 - b3/2)*(a4/2 - b4/2) - 2*(a3/2 + b3/2)*(a4/2 + b4/2), ...
    2*(a7 - b7)*(a1/2 - b1/2) - 2*(a5 - b5)*(a3/2 - b3/2) - 2*(a6 - b6)*(a4/2 + b4/2) + 2*(a8 - b8)*(a2/2 + b2/2), ...
    (a1/2 - b1/2)^2 + (a2/2 + b2/2)^2 + (a3/2 + b3/2)^2 + (a4/2 - b4/2)^2, ...
    2*(a6 - b6)*(a3/2 + b3/2) - 2*(a5 - b5)*(a4/2 - b4/2) - 2*(a7 - b7)*(a2/2 + b2/2) + 2*(a8 - b8)*(a1/2 - b1/2), ...
    (a1 - b1)^2 + (a2 - b2)^2 + (a3 - b3)^2 + (a4 - b4)^2 + (a5 - b5)^2 + (a6 - b6)^2 + (a7 - b7)^2 + (a8 - b8)^2, ...
    2*(a3/2 + b3/2)*(a4/2 - b4/2) - 2*(a3/2 - b3/2)*(a4/2 + b4/2), ...
    2*(a2/2 - b2/2)*(a4/2 + b4/2) - 2*(a2/2 - b2/2)*(a4/2 - b4/2) - 2*(a2/2 + b2/2)*(a4/2 - b4/2) + 2*(a2/2 + b2/2)*(a4/2 + b4/2), ...
    2*(a2/2 - b2/2)*(a3/2 - b3/2) - 2*(a2/2 - b2/2)*(a3/2 + b3/2) + 2*(a2/2 + b2/2)*(a3/2 - b3/2) - 2*(a2/2 + b2/2)*(a3/2 + b3/2), ...
    2*(a7 + b7)*(a3/2 + b3/2) + 2*(a8 + b8)*(a4/2 + b4/2) - 2*(a7 - b7)*(a3/2 - b3/2) - 2*(a8 - b8)*(a4/2 - b4/2), ...
    2*(a3/2 + b3/2)*(a4/2 + b4/2) - 2*(a3/2 - b3/2)*(a4/2 - b4/2), ...
    2*(a3/2 - b3/2)^2 - 2*(a3/2 + b3/2)^2 - 2*(a4/2 - b4/2)^2 + 2*(a4/2 + b4/2)^2, ...
    2*(a8 + b8)*(a1/2 - b1/2) - 2*(a7 + b7)*(a2/2 + b2/2) + 2*(a5 - b5)*(a4/2 - b4/2) - 2*(a5 - b5)*(a4/2 + b4/2) + 2*(a6 - b6)*(a3/2 - b3/2) - 2*(a6 - b6)*(a3/2 + b3/2) + 2*(a7 - b7)*(a2/2 + b2/2) - 2*(a8 - b8)*(a1/2 - b1/2), ...
    2*(a3/2 - b3/2)*(a4/2 - b4/2) - 2*(a3/2 + b3/2)*(a4/2 + b4/2), ...
    2*(a5 - b5)*(a3/2 + b3/2) - 2*(a8 + b8)*(a2/2 + b2/2) - 2*(a5 - b5)*(a3/2 - b3/2) - 2*(a7 + b7)*(a1/2 - b1/2) + 2*(a7 - b7)*(a1/2 - b1/2) + 2*(a6 - b6)*(a4/2 - b4/2) - 2*(a6 - b6)*(a4/2 + b4/2) + 2*(a8 - b8)*(a2/2 + b2/2), ...
    2*(a4 + b4)*(a3 - b3) - 2*(a3 + b3)*(a4 - b4) - 2*(a7 + b7)*(a8 - b8) + 2*(a8 + b8)*(a7 - b7), ...
    2*(a2/2 - b2/2)*(a4/2 - b4/2) - 2*(a2/2 + b2/2)*(a4/2 + b4/2), ...
    2*(a3/2 - b3/2)*(a4/2 - b4/2) - 2*(a3/2 - b3/2)*(a4/2 + b4/2) + 2*(a3/2 + b3/2)*(a4/2 - b4/2) - 2*(a3/2 + b3/2)*(a4/2 + b4/2), ...
    2*(a2/2 + b2/2)^2 - 2*(a2/2 - b2/2)^2 + 2*(a4/2 - b4/2)^2 - 2*(a4/2 + b4/2)^2, ...
    2*(a5 - b5)*(a4/2 + b4/2) - 2*(a8 + b8)*(a1/2 - b1/2) - 2*(a5 - b5)*(a4/2 - b4/2) - 2*(a6 + b6)*(a3/2 + b3/2) + 2*(a6 - b6)*(a3/2 + b3/2) + 2*(a7 - b7)*(a2/2 - b2/2) - 2*(a7 - b7)*(a2/2 + b2/2) + 2*(a8 - b8)*(a1/2 - b1/2), ...
    2*(a2/2 - b2/2)*(a4/2 + b4/2) - 2*(a2/2 + b2/2)*(a4/2 - b4/2), ...
    2*(a2/2 + b2/2)*(a3/2 - b3/2) - 2*(a2/2 - b2/2)*(a3/2 + b3/2) - 2*(a2/2 - b2/2)*(a3/2 - b3/2) + 2*(a2/2 + b2/2)*(a3/2 + b3/2), ...
    2*(a6 + b6)*(a2/2 + b2/2) + 2*(a8 + b8)*(a4/2 + b4/2) - 2*(a6 - b6)*(a2/2 - b2/2) - 2*(a8 - b8)*(a4/2 - b4/2), ...
    2*(a2/2 + b2/2)*(a4/2 + b4/2) - 2*(a2/2 - b2/2)*(a4/2 - b4/2), ...
    2*(a6 + b6)*(a1/2 - b1/2) - 2*(a8 + b8)*(a3/2 + b3/2) + 2*(a5 - b5)*(a2/2 - b2/2) - 2*(a5 - b5)*(a2/2 + b2/2) - 2*(a6 - b6)*(a1/2 - b1/2) + 2*(a7 - b7)*(a4/2 - b4/2) - 2*(a7 - b7)*(a4/2 + b4/2) + 2*(a8 - b8)*(a3/2 + b3/2), ...
    2*(a2 + b2)*(a4 - b4) - 2*(a4 + b4)*(a2 - b2) + 2*(a6 + b6)*(a8 - b8) - 2*(a8 + b8)*(a6 - b6), ...
    2*(a2/2 + b2/2)*(a3/2 + b3/2) - 2*(a2/2 - b2/2)*(a3/2 - b3/2), ...
    2*(a2/2 - b2/2)^2 - 2*(a2/2 + b2/2)^2 - 2*(a3/2 - b3/2)^2 + 2*(a3/2 + b3/2)^2, ...
    2*(a3/2 + b3/2)*(a4/2 - b4/2) - 2*(a3/2 - b3/2)*(a4/2 + b4/2) - 2*(a3/2 - b3/2)*(a4/2 - b4/2) + 2*(a3/2 + b3/2)*(a4/2 + b4/2), ...
    2*(a7 + b7)*(a1/2 - b1/2) - 2*(a6 + b6)*(a4/2 + b4/2) + 2*(a5 - b5)*(a3/2 - b3/2) - 2*(a5 - b5)*(a3/2 + b3/2) - 2*(a7 - b7)*(a1/2 - b1/2) + 2*(a6 - b6)*(a4/2 + b4/2) + 2*(a8 - b8)*(a2/2 - b2/2) - 2*(a8 - b8)*(a2/2 + b2/2), ...
    2*(a2/2 - b2/2)*(a3/2 - b3/2) - 2*(a2/2 + b2/2)*(a3/2 + b3/2), ...
    2*(a2/2 - b2/2)*(a4/2 - b4/2) + 2*(a2/2 - b2/2)*(a4/2 + b4/2) - 2*(a2/2 + b2/2)*(a4/2 - b4/2) - 2*(a2/2 + b2/2)*(a4/2 + b4/2), ...
    2*(a5 - b5)*(a2/2 + b2/2) - 2*(a7 + b7)*(a4/2 + b4/2) - 2*(a5 - b5)*(a2/2 - b2/2) - 2*(a6 + b6)*(a1/2 - b1/2) + 2*(a6 - b6)*(a1/2 - b1/2) + 2*(a7 - b7)*(a4/2 + b4/2) + 2*(a8 - b8)*(a3/2 - b3/2) - 2*(a8 - b8)*(a3/2 + b3/2), ...
    2*(a2/2 + b2/2)*(a3/2 - b3/2) - 2*(a2/2 - b2/2)*(a3/2 + b3/2), ...
    2*(a6 + b6)*(a2/2 + b2/2) + 2*(a7 + b7)*(a3/2 + b3/2) - 2*(a6 - b6)*(a2/2 - b2/2) - 2*(a7 - b7)*(a3/2 - b3/2), ...
    2*(a3 + b3)*(a2 - b2) - 2*(a2 + b2)*(a3 - b3) - 2*(a6 + b6)*(a7 - b7) + 2*(a7 + b7)*(a6 - b6), ...
    (a1/2 - b1/2)^2 + (a2/2 - b2/2)^2 + (a3/2 - b3/2)^2 + (a4/2 - b4/2)^2, ...
    2*(a2/2 - b2/2)*(a3/2 + b3/2) - 2*(a2/2 + b2/2)*(a3/2 - b3/2), ...
    2*(a2/2 - b2/2)*(a4/2 + b4/2) - 2*(a2/2 + b2/2)*(a4/2 - b4/2), ...
    2*(a7 + b7)*(a4/2 - b4/2) - 2*(a8 + b8)*(a3/2 - b3/2) - 2*(a5 - b5)*(a2/2 - b2/2) + 2*(a6 - b6)*(a1/2 - b1/2), ...
    (a1/2 - b1/2)^2 + (a2/2 + b2/2)^2 + (a3/2 + b3/2)^2 + (a4/2 - b4/2)^2, ...
    2*(a3/2 + b3/2)*(a4/2 + b4/2) - 2*(a3/2 - b3/2)*(a4/2 - b4/2), ...
    2*(a7 + b7)*(a1/2 - b1/2) + 2*(a8 + b8)*(a2/2 + b2/2) - 2*(a5 - b5)*(a3/2 + b3/2) - 2*(a6 - b6)*(a4/2 - b4/2), ...
    (a1/2 - b1/2)^2 + (a2/2 + b2/2)^2 + (a3/2 - b3/2)^2 + (a4/2 + b4/2)^2, ...
    2*(a8 + b8)*(a1/2 - b1/2) - 2*(a7 + b7)*(a2/2 + b2/2) - 2*(a5 - b5)*(a4/2 + b4/2) + 2*(a6 - b6)*(a3/2 - b3/2), ...
    (a3 + b3)^2 + (a4 + b4)^2 + (a7 + b7)^2 + (a8 + b8)^2 + (a1 - b1)^2 + (a2 - b2)^2 + (a5 - b5)^2 + (a6 - b6)^2, ...
    2*(a2/2 + b2/2)*(a3/2 - b3/2) - 2*(a2/2 - b2/2)*(a3/2 + b3/2), ...
    2*(a2/2 - b2/2)^2 - 2*(a2/2 + b2/2)^2 + 2*(a3/2 - b3/2)^2 - 2*(a3/2 + b3/2)^2, ...
    2*(a3/2 - b3/2)*(a4/2 - b4/2) + 2*(a3/2 - b3/2)*(a4/2 + b4/2) - 2*(a3/2 + b3/2)*(a4/2 - b4/2) - 2*(a3/2 + b3/2)*(a4/2 + b4/2), ...
    2*(a8 + b8)*(a2/2 - b2/2) - 2*(a6 + b6)*(a4/2 - b4/2) - 2*(a7 + b7)*(a1/2 - b1/2) - 2*(a8 + b8)*(a2/2 + b2/2) - 2*(a5 - b5)*(a3/2 - b3/2) + 2*(a5 - b5)*(a3/2 + b3/2) + 2*(a7 - b7)*(a1/2 - b1/2) + 2*(a6 - b6)*(a4/2 - b4/2), ...
    2*(a2/2 - b2/2)*(a3/2 + b3/2) - 2*(a2/2 + b2/2)*(a3/2 - b3/2), ...
    2*(a2/2 - b2/2)*(a4/2 - b4/2) + 2*(a2/2 - b2/2)*(a4/2 + b4/2) - 2*(a2/2 + b2/2)*(a4/2 - b4/2) - 2*(a2/2 + b2/2)*(a4/2 + b4/2), ...
    2*(a7 + b7)*(a4/2 - b4/2) - 2*(a6 + b6)*(a1/2 - b1/2) - 2*(a8 + b8)*(a3/2 - b3/2) + 2*(a8 + b8)*(a3/2 + b3/2) - 2*(a5 - b5)*(a2/2 - b2/2) + 2*(a5 - b5)*(a2/2 + b2/2) + 2*(a6 - b6)*(a1/2 - b1/2) - 2*(a7 - b7)*(a4/2 - b4/2), ...
    2*(a2/2 + b2/2)*(a3/2 + b3/2) - 2*(a2/2 - b2/2)*(a3/2 - b3/2), ...
    2*(a6 + b6)*(a2/2 + b2/2) - 2*(a7 + b7)*(a3/2 + b3/2) - 2*(a6 - b6)*(a2/2 - b2/2) + 2*(a7 - b7)*(a3/2 - b3/2), ...
    2*(a2 - b2)*(a3 - b3) + 2*(a6 - b6)*(a7 - b7) - 2*(a2 + b2)*(a3 + b3) - 2*(a6 + b6)*(a7 + b7), ...
    2*(a2/2 + b2/2)*(a4/2 - b4/2) - 2*(a2/2 - b2/2)*(a4/2 + b4/2), ...
    2*(a3/2 - b3/2)*(a4/2 - b4/2) - 2*(a3/2 - b3/2)*(a4/2 + b4/2) + 2*(a3/2 + b3/2)*(a4/2 - b4/2) - 2*(a3/2 + b3/2)*(a4/2 + b4/2), ...
    2*(a2/2 - b2/2)^2 - 2*(a2/2 + b2/2)^2 + 2*(a4/2 - b4/2)^2 - 2*(a4/2 + b4/2)^2, ...
    2*(a6 + b6)*(a3/2 - b3/2) - 2*(a7 + b7)*(a2/2 - b2/2) + 2*(a7 + b7)*(a2/2 + b2/2) - 2*(a8 + b8)*(a1/2 - b1/2) - 2*(a5 - b5)*(a4/2 - b4/2) + 2*(a5 - b5)*(a4/2 + b4/2) - 2*(a6 - b6)*(a3/2 - b3/2) + 2*(a8 - b8)*(a1/2 - b1/2), ...
    2*(a2/2 + b2/2)*(a4/2 + b4/2) - 2*(a2/2 - b2/2)*(a4/2 - b4/2), ...
    2*(a2/2 - b2/2)*(a3/2 - b3/2) + 2*(a2/2 - b2/2)*(a3/2 + b3/2) - 2*(a2/2 + b2/2)*(a3/2 - b3/2) - 2*(a2/2 + b2/2)*(a3/2 + b3/2), ...
    2*(a8 + b8)*(a4/2 + b4/2) - 2*(a6 + b6)*(a2/2 + b2/2) + 2*(a6 - b6)*(a2/2 - b2/2) - 2*(a8 - b8)*(a4/2 - b4/2), ...
    2*(a2/2 - b2/2)*(a4/2 + b4/2) - 2*(a2/2 + b2/2)*(a4/2 - b4/2), ...
    2*(a7 + b7)*(a4/2 - b4/2) - 2*(a6 + b6)*(a1/2 - b1/2) - 2*(a7 + b7)*(a4/2 + b4/2) - 2*(a8 + b8)*(a3/2 - b3/2) - 2*(a5 - b5)*(a2/2 - b2/2) + 2*(a5 - b5)*(a2/2 + b2/2) + 2*(a6 - b6)*(a1/2 - b1/2) + 2*(a8 - b8)*(a3/2 - b3/2), ...
    2*(a2 - b2)*(a4 - b4) + 2*(a6 - b6)*(a8 - b8) - 2*(a2 + b2)*(a4 + b4) - 2*(a6 + b6)*(a8 + b8), ...
    (a1/2 - b1/2)^2 + (a2/2 + b2/2)^2 + (a3/2 + b3/2)^2 + (a4/2 - b4/2)^2, ...
    2*(a2/2 + b2/2)*(a3/2 - b3/2) - 2*(a2/2 - b2/2)*(a3/2 + b3/2), ...
    2*(a2/2 + b2/2)*(a4/2 + b4/2) - 2*(a2/2 - b2/2)*(a4/2 - b4/2), ...
    2*(a6 + b6)*(a1/2 - b1/2) - 2*(a8 + b8)*(a3/2 + b3/2) - 2*(a5 - b5)*(a2/2 + b2/2) + 2*(a7 - b7)*(a4/2 - b4/2), ...
    (a1/2 - b1/2)^2 + (a2/2 - b2/2)^2 + (a3/2 - b3/2)^2 + (a4/2 - b4/2)^2, ...
    2*(a3/2 - b3/2)*(a4/2 + b4/2) - 2*(a3/2 + b3/2)*(a4/2 - b4/2), ...
    2*(a8 + b8)*(a2/2 - b2/2) - 2*(a6 + b6)*(a4/2 - b4/2) - 2*(a5 - b5)*(a3/2 - b3/2) + 2*(a7 - b7)*(a1/2 - b1/2), ...
    (a1/2 - b1/2)^2 + (a2/2 - b2/2)^2 + (a3/2 + b3/2)^2 + (a4/2 + b4/2)^2, ...
    2*(a6 + b6)*(a3/2 + b3/2) + 2*(a8 + b8)*(a1/2 - b1/2) - 2*(a5 - b5)*(a4/2 + b4/2) - 2*(a7 - b7)*(a2/2 - b2/2), ...
    (a2 + b2)^2 + (a4 + b4)^2 + (a6 + b6)^2 + (a8 + b8)^2 + (a1 - b1)^2 + (a3 - b3)^2 + (a5 - b5)^2 + (a7 - b7)^2, ...
    2*(a3/2 + b3/2)*(a4/2 + b4/2) - 2*(a3/2 - b3/2)*(a4/2 - b4/2), ...
    2*(a2/2 - b2/2)*(a4/2 - b4/2) - 2*(a2/2 - b2/2)*(a4/2 + b4/2) + 2*(a2/2 + b2/2)*(a4/2 - b4/2) - 2*(a2/2 + b2/2)*(a4/2 + b4/2), ...
    2*(a2/2 - b2/2)*(a3/2 - b3/2) - 2*(a2/2 - b2/2)*(a3/2 + b3/2) + 2*(a2/2 + b2/2)*(a3/2 - b3/2) - 2*(a2/2 + b2/2)*(a3/2 + b3/2), ...
    2*(a7 + b7)*(a3/2 + b3/2) - 2*(a8 + b8)*(a4/2 + b4/2) - 2*(a7 - b7)*(a3/2 - b3/2) + 2*(a8 - b8)*(a4/2 - b4/2), ...
    2*(a3/2 + b3/2)*(a4/2 - b4/2) - 2*(a3/2 - b3/2)*(a4/2 + b4/2), ...
    2*(a3/2 - b3/2)^2 - 2*(a3/2 + b3/2)^2 + 2*(a4/2 - b4/2)^2 - 2*(a4/2 + b4/2)^2, ...
    2*(a6 + b6)*(a3/2 - b3/2) - 2*(a6 + b6)*(a3/2 + b3/2) - 2*(a7 + b7)*(a2/2 - b2/2) - 2*(a8 + b8)*(a1/2 - b1/2) - 2*(a5 - b5)*(a4/2 - b4/2) + 2*(a5 - b5)*(a4/2 + b4/2) + 2*(a7 - b7)*(a2/2 - b2/2) + 2*(a8 - b8)*(a1/2 - b1/2), ...
    2*(a3/2 - b3/2)*(a4/2 + b4/2) - 2*(a3/2 + b3/2)*(a4/2 - b4/2), ...
    2*(a6 + b6)*(a4/2 + b4/2) - 2*(a6 + b6)*(a4/2 - b4/2) - 2*(a7 + b7)*(a1/2 - b1/2) + 2*(a8 + b8)*(a2/2 - b2/2) - 2*(a5 - b5)*(a3/2 - b3/2) + 2*(a5 - b5)*(a3/2 + b3/2) + 2*(a7 - b7)*(a1/2 - b1/2) - 2*(a8 - b8)*(a2/2 - b2/2), ...
    2*(a3 - b3)*(a4 - b4) + 2*(a7 - b7)*(a8 - b8) - 2*(a3 + b3)*(a4 + b4) - 2*(a7 + b7)*(a8 + b8), ...
    (a1/2 - b1/2)^2 + (a2/2 + b2/2)^2 + (a3/2 - b3/2)^2 + (a4/2 + b4/2)^2, ...
    2*(a2/2 + b2/2)*(a3/2 + b3/2) - 2*(a2/2 - b2/2)*(a3/2 - b3/2), ...
    2*(a2/2 + b2/2)*(a4/2 - b4/2) - 2*(a2/2 - b2/2)*(a4/2 + b4/2), ...
    2*(a6 + b6)*(a1/2 - b1/2) + 2*(a7 + b7)*(a4/2 + b4/2) - 2*(a5 - b5)*(a2/2 + b2/2) - 2*(a8 - b8)*(a3/2 - b3/2), ...
    (a1/2 - b1/2)^2 + (a2/2 - b2/2)^2 + (a3/2 + b3/2)^2 + (a4/2 + b4/2)^2, ...
    2*(a3/2 + b3/2)*(a4/2 - b4/2) - 2*(a3/2 - b3/2)*(a4/2 + b4/2), ...
    2*(a7 + b7)*(a1/2 - b1/2) - 2*(a6 + b6)*(a4/2 + b4/2) - 2*(a5 - b5)*(a3/2 + b3/2) + 2*(a8 - b8)*(a2/2 - b2/2), ...
    (a1/2 - b1/2)^2 + (a2/2 - b2/2)^2 + (a3/2 - b3/2)^2 + (a4/2 - b4/2)^2, ...
    2*(a6 + b6)*(a3/2 - b3/2) - 2*(a7 + b7)*(a2/2 - b2/2) - 2*(a5 - b5)*(a4/2 - b4/2) + 2*(a8 - b8)*(a1/2 - b1/2), ...
    (a2 + b2)^2 + (a3 + b3)^2 + (a6 + b6)^2 + (a7 + b7)^2 + (a1 - b1)^2 + (a4 - b4)^2 + (a5 - b5)^2 + (a8 - b8)^2];
end
